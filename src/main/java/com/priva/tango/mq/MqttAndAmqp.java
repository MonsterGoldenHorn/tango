package com.priva.tango.mq;

/**
 * @author tango
 * @description
 * @date 2022/8/30 9:43
 */
public class MqttAndAmqp {
    /**
     * rabbitmq两种协议都可以支持
     */

    /**
     * MQTT（Message Queuing Telemetry Transport，消息队列遥测传输协议）
     * 由IBM在1999年发布，是一种基于发布/订阅（publish/subscribe）模式的"轻量级"通讯协议
     * 支持嵌入式，性能要求不高
     *
     * 发布/订阅：使用发布/订阅消息模式，提供一对多的消息发布，解除应用程序耦合
     *
     * 消息传输：对负载内容屏蔽的消息传输机制。
     *
     * 服务质量（QoS）：提供三种等级的服务质量，来提高数据传输质量
     *
     * 低功耗：小型传输，开销很小（固定长度的头部是2字节），协议交换最小化，以降低网络流量
     *
     * 通知机制：使用Last Will和Testament特性通知有关各方客户端异常中断的机制
     *
     * 连接顺序，参考http
     * publisher:
     *  connect and ack to broker
     * broker:
     *  connect and ack subscribe
     *
     * 网络连接（ Network Connection )：网络连接 客户端连接到服务器时所使 有的底层传输协议，由该连接来负责提供有序的、可靠的基于字节流的双向传输
     * 应用消息（ application Message )：应用消息指通过网络所传输的应用数据，该数据 般包括主题和负载两部分。
     * 主题（ Topic）：主题题相当于应用消息的类型 ，消息订阅者订阅后，就会收到该主题的消息内容
     * 负载（ Payload）： 负载指消息订阅者具体接收的内容
     * 客户端（Client）客户端指使用 MQTT 程序或设备 客户端总是通过网络连接到服务端，它可以发布应用消息给其他相关的客端、订阅消息用以请求接收相关的应用消息、取消订阅应用消息、从服务器断开连接等。
     * 服务器（ Server)：服务器也是指程序或设备，它作为发送消息的客户端束 请求订阅的客户端之间的中介。服务器的功能包括接收来自客户端的网络连接、接收客户端发布的应用消息、处理客户端的订阅和取消订阅的请求、转发应用消息给相应的客户端等
     * 会话（ Session)：客户端与服务器建立连接之后就是 个会话，客户端和服务器之间通过会话来进行状态交互。会话存在于一个网络连接之间，也可能会跨越多个连续的网络连接。会话主要用于客户端和服务器之间的逻辑层面的通信
     * 订阅（ Subscription)：订阅一般与 个会话关联，会话可以包含多于 个的订阅。订阅包含 个主题过滤器和个服务质量（ QoS ）等级。会话的每个订阅都有 个不同的主题过滤器。
     * 主题名（topic Name)：主题名是附加在消息上的一个标签，该标签与服务器的订阅相匹配，服务器会根据该标签将消息发送给与订阅所匹配的每个客户端
     * 主题过滤器（topic Filter)：主题过滤器是订阅中包含的一个表达式，用于表示相关联的一个或多个主题。主题过滤器可以使用通配衍。
     * MQTT 控制拇文 CMQT Control Packet)：MQT 控制报文实际上就是通过网络连接发送的信息数据包
     * ————————————————
     */
    /**
     * amqp
     * 适合服务端
     * 基本概念：基本概念是指 AMQP 内部定义的各组件及组件的功能说明
     * 功能命令：是指该协议所定义的 系列命令，应用程序可以基于这些命令来实现相应的功能
     * 传输层协议：是一个网络级协议，它定义了数据的 传输格式，消息队列的客户端可以基于这个协议与消息代理和 AMQP 的相模型进行交互通信，
     *     该协议的内容包括数据， 吭处理、信道 用、内容编码、心跳检测、数据表示和错误处理等
     * ————————————————
     * Message （消息）：消息服务器所处理数据的原子单元。消息可以携带内容，从格式上看，消息包括 个内容头、 组属性和
     *      个内容体这里所说的消息可以对应到许多不同应用程序的实体，比如 个应用程序级消息、 个传输文件、 个数据流帧等。
     *      消息可以被保存到磁盘上这样即使发生严重的网络故障、服务器崩溃 可确保投递。消息可以有优先级，高优先级的消息会在等待同
     *      个消息队列时在低优先级的消息之前发送，当消息必须被丢弃以确保消息服务器的服务质量时，服务器将会优先丢弃低优先级的消息 。
     *      消息服务器不能修改所接收到的井将传递给消费者应用程序的消息容体。消息服务器可以在内容头中添加额外信息，但不能删除或修改现有信息。
     * Publisher （消息生产者）也是 个向交换器发布消息的客户端应用程序 对于java来说就是发送请求的那一段代码
     * Exchange （交换器）：用来接收消息生产者所发送的消息井将这些消息路由给服务器中的队列。
     * Binding （绑定） 用于消息队列和交换器之间的关联。 个绑定就是基于路由键将交换器和消息队列连接起来的路由规则，
     *      所以以将交换器理解成 个由绑定构成的路由表
     * Virtual Host （虚拟主机）：它是消息队列以及相关对象的集合，是共享同一个身份验证和加密环境的独 服务器域。
     *      每个虚拟主本质上都是 mini 版的消息服务器，拥有自己的队列、交换器、绑定和权限机制。
     * Broker （消息代理） 表示消息队列服务器实体，接受客户端连接，实现 AMQP 消息队列和路由功能的过程
     * Routing Key （路由规则〉：虚拟机可用它来确定如何路由一个特定消息。
     * Queue （消息队列）：用来保存消息直到发送给消费者。它是消息的容器，也是消息的终点。一个消息可被投入
     *      个或多个队中息一直在队列里面，等待消费者连接到这个队列将其取走。
     * Connection （连接〉 可以理解成客户端和消息队列服务器之间的 TCP 连接
     * Channel （信道）：仅仅当创建了连接后，若客户端还是不能发送消息，则需要为连接创建一个信道。信道是
     *      条独立的双向数流通道，它是建立在真实的 TCP 连接内的虚拟连接， AMQP 令都是通过信道发出去的，
     *      不管是发布消息、订阅队列还是接收消息，它们都通过信道完成。 个连接可以包含多个信道，
     *      之所以需要信道，==是因为TCP 接的建立和释放都是 分昂贵的，==如果客户端的每
     *      个线程都需要与消息服务器交互，如果每 个线程都建立了 TCP 连接，暂且不考虑 TCP
     *      接是否？浪费，就算操作系统也无法承受每秒建立如此多的 TCP 连接
     */
}
