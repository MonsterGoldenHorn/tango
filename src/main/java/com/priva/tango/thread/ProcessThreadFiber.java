package com.priva.tango.thread;

/**
 * 进程是资源分配的单位
 * 线程是CPU调度的单位，也叫轻量级进程LWP
 * 协程是一种比线程更加轻量级的存在，协程不是被操作系统内核所管理，而完全是由程序所控制（也就是在用户态执行）
 */
public class ProcessThreadFiber {
    public static void main(String[] args) {
        /**
         * java多线程属于一个jvm进程中使用接口对内核线程进行操作
         * 用户级线程（ULT）：用户程序实现，不依赖操作系统核心，应用提供创建、同步、调度和管理线程函数来控制用户线程。
         *  不需要用户态/核心态切换，速度快。内核对ULT无感知，线程阻塞则进程（包括它所有的线程）阻塞
         * 内核级线程（KLT）:系统内核管理线程（KLT），内核保存线程的状态和上下文信息，线程组设不会引起进程阻塞。在多处理器系统上，
         *  多线程在多处理器上并行运行线程的创建、调度和管理由内核完成，效率要比ULT慢，比进程操作快
         */
        /**
         * 创建和销毁的代价更小:由于线程创建时需要向操作系统申请资源，并且在销毁时将资源归还，因此它的创建和销毁的开销比较大。
         * 相比之下，goroutine的创建和销毁是由go语言在运行时自己管理的，因此开销更低。内存消耗更少：Goroutine所需要的内存通常只有2kb，
         * 而线程则需要1Mb（500倍）
         */
        /**
         * context约等于threadLocal
         */
    }

    static int fib(int n) {
        if (n < 2)
            return 1;
        else
            return fib(n - 1) + fib(n - 2);
    }
}
