package com.priva.tango.exam;

/**
 * @description
 * @date 2023/10/11 16:08
 */
public class DB {
    /**
     * 数据库关系的3种类型
     * 1 基本关系 (通常又称为基本表或基表): 实际存在的表，实际存储数
     * 据的逻辑表示。
     * 2 查询表:查询结果对应的表。
     * 3 视图表:由基表或其他视图表导出的表，本身不独立存储，数据库只
     * 存放它的定义，常称为虚表。
     *
     * 数据库模式
     *
     * 数据库视图:它一个虚拟表(逻辑上的表)，其内容由查询定义 (仅保存SQL查询语句)
     * 同真实的表一样，视图包含一系列带有名称的列和行数据。但是，视图并没有真正存储这
     * 些数据，而是通过查询原始表动态生成所需要的数据。
     *  >> 视图 的优点:
     * 1、视图能简化用户操作
     * 2、视图使用户能以多种角度看待同一数据
     * 3、视图对重构数据库提供了一定程度的逻辑独立性
     * 4、视图可以对机密数据提供安全保护
     * 物化视图:它不是传统意义上虚拟视图，是实体化视图，其本身会存储数据。同时当原始
     * 表中的数据更新时，物化视图也会更新。
     *
     *  分布式数据库
     *
     *  (1) 全局外模式。全局外模式是全局应用的用户视图，是全局概念模
     * 式的子集，该层直接与用户 (或应用程序) 交互
     * (2) 全局概念模式。全局概念模式定义分布式数据库中数据的整体【逻辑结构】，数据就如同根本没有分布一样，可用传统的集中式数据库中所
     * 采用的方法进行定义
     * (3) 分片模式。将一个关系模式分解成为几个数据片
     * (4)分布模式。分布式数据库的本质特性就是数据分布在不同的物理
     * 位置。分布模式的主要职责是定义数据片段(即分片模式的处理结果)
     * 的存放节点
     * (5) 局部概念模式。局部概念模式是局部数据库的概念模式
     * (6)局部内模式。局部内模式是局部数据库的内模式。
     *
     * 1数据独立性。除了数据的逻辑独立性与物理独立性外，还有数据
     *      分布独立性(分布透明性)。
     * 2集中与自治共享结合的控制结构。各局部的DBMS可以独立地管
     *  理局部数据库，具有自治的功能。同时，系统又设有集中控制机
     *  制，协调各局部DBMS的工作，执行全局应用。
     * 3适当增加数据冗余度。在不同的场地存储同一数据的多个副本，
     *  可以提高系统的可靠性和可用性，同时也能提高系统性能。
     *  (提高系统的 可用性 ，即当系统中某个节点发生故障时，因为数据
     *  有其他副本在非故障场地上，对其他所有场地来说，数据仍然是可
     *      用的，从而保证数据的完备性。
     * 4全局的一致性、可串行性和可恢复性。
     *
     * 分布透明性
     *  分片透明性  水平分片  垂直分片  混合分片
     *  位置透明性
     *  局部数据模型透明性
     *
     * 分片透明: 是指用户不必关心数据是如何分片的，它们对致据的操作在金局关系上进行，即如何分片对用户是透明的。
     * 复制透明:用户不用关心数据库在网络中各个节点的复制情况，被复制的数据的更新都由系统自动完成。
     * 位置透明:是指用户不必知道所操作的数据放在何处，即数据分配到哪个或哪些站点存储对用户是透明的
     * 局部映像透明性 (逻辑透明》 : 是最低层次的透明性，该透明性提供数据到局部数据库的映像，即用户不必关心局部DBMS支持哪种数据模型、使用哪种数据操纵语言，
     *      数据模型和操纵语言的转换是由系统完成的。因此，局部映像透明性对异构型和同构异质的分布式数据库系统是非常重要的。
     */
    /*数据库设计*/
    /**
     * >> 设计过程
     *      需求分析（数据字典和数据流），概念结构设计（er图 属性实体联系），逻辑结构设计（关系模式），物理设计（硬件，OS，索引）
     *      数据库实施、运行和维护
     */
    /*概设*/
    /**
     * >>概设 -需求分析
     * 抽象数据
     * 设计局部ER模型合并局部模型
     * 消除冲突重构优化:属性冲突:包括属性域冲突和属性取值冲突。
     *              命名冲突:包括同名异义和异名同义。
     *              结构冲突:包括同一对象在不同应用中具有不同的抽象，以及同一实体在不同局部E-R图中所包含的属性个数和属性排列次序不完全相同。
     * 消除冗余
     * 逻辑设计
     */
    /*逻辑设计*/
    /**
     *  >>>> 三范式
     *   第一范式 (1NF) : 在关系模式R中，当且仅当所有域只包含原子值，即每个属性都是不可再分的数据项，则称关系模式R是第一范式。
     *     大宽表
     *      1NF是所有关系型数据库RDBMS的最基本要求
     *      会存在数据冗余过大，插入异常，删除异常，修改异常的问题
     *   第二范式 (2NF) : 当且仅当实体E是第一范式 (1NF) ，且每一个非主属性完全依赖主键 (不存在部分依赖) 时，则称实体E是第二范式。
     *     宽表拆分
     *      有属性依赖非主键就不行，主键可以是联合主键
     *   第三范式 (3NF) : 当且仅当实体E是第二范式 (2NF) ，且E中没有非主属性传递依赖于码时，则称实体E是第三范式。
     *     所有间接关系拆表
     *      码就是主键，非主属性是间接依赖主键的就需要拆
     *      消除传递依赖可以解决插入异常
     *   3.5NF
     *      BC范式 (BCNF) : 设R是一个关系模式，F是它的依赖集，R属于BCNF当且仅当其F中每个依赖的决定因素必定包含R的某个候选码。
     *      任何主属性不能对其他主键子集存在依赖。联合主键字段之间不能存在依赖性
     *      主键对其他都是1-1
     *   第四范式：表中字段不能存在多值依赖关系。
     *   第五范式：表中字段的数据之间不能存在连接依赖关系。
     *   域键范式：试图研究出一个库表设计时的终极完美范式。
     *
     *   >>>反规范化
     *   规范化会使表不断的拆分，从而导致数据表过多。这样虽然减少了数据冗余，提高了增、删、改的速度，但会增加查询的工作量
     *   技术手段
     *      增加派生性冗余列
     *      增加冗余列
     *      重新组表
     *      分割表
     *
     */
    /*物理设计*/
    /**
     *
     *
     */
    /*数据库实施设计*/
    /**
     *
     */
    /**
     * 并发控制
     * 事务ACID
     *  原子 原子性说的是数据要么一起成功，要么一起失败，
     *  一致 事务的前后，数据库中的数据的状态要确保一致
     *  隔离 多个并发事务之间是隔离的
     *  持久性  持久性的体现就是数据一旦commit之后，那么对于数据的改变就是永久的
     *
     *  并发问题  #code com.priva.tango.mysql.Lock
     *
     *  S共享锁 X独占锁
     *  一级封锁协议。事务T在修改数据R之前必须先对其加X独占锁，直到事务结束才释放。可防止丢失修改
     *  二级封锁协议。一级封锁协议加上事务T在读取数据R之前先对其加S共享锁，读完后即可释放S锁。可防止丢失修改，还可防止读“脏”数据
     *  三级封锁协议。一级封锁协议加上事务T在读取数据R之前先对其加S锁，直到事务结束才释放。可防止丢失修改、防止读“脏”数据与防止数据(不可)重复读两
     *      段锁协议。可串行化的。可能发生死锁
     *
     */
    /*数据库运行维护*/
    /**
     * >>数据库安全
     * 用户标识和鉴定  最外层的安全保护措施，可以使用用户帐户、口令及随机数检验等方式
     * 存取控制  对用户进行授权，包括操作类型(如查找、插入、删除、修改等动作）和数据对象 (主要是数据范围)广的权限。  Grant and Revoke
     * 密码存储和传输  对远程终端信息用密码传输
     * 视图的保护  对视图进行授权
     * 存储过程  隐藏内部表结构
     * 审计  使用一个专用文件或数据库，自动将用户对数据库的所有操作记录
     *
     * >>备份
     * 冷备份也称为静态备份，是将数据库正常关闭，在停止状态下，将数据库的文件全部备份 (复制)下来。
     * 热备份也称为动态备份，是利用备份软件，在数据库正常运行的状态下，将数据库中的数据文件备份出来。
     *
     * 完全备份:备份所有数据
     * 差量备份:仅备份上一次完全备份之后变化的数据
     * 增量备份:备份上一次备份之后变化的数据
     * 日志文件:事务日志是针对数据库改变所做的记录，它可以记录针对数据库的任何操作，并将记录结果保存在独立的文件中
     *
     */
    /**
     * >>性能调整
     * 对于数据库系统，性能调整主要包括CPU/内存使用状况、优化数据库设计、优化数据库管理以及进
     *      程/线程状态、硬盘剩余空间、日志文件大小等;
     * 对于应用系统，性能调整主要包括应用系统的可用性、响应时间、并发用户数以及特定应用的系统资
     *      源占用等。
     */
    /*关系运算*/
    /**
     * >>逻辑结构设计  一个实体必须转换关系模式
     *     一对一  归并 任意一端可归并另一属性，独立关系 任意一端写入另一主键
     *      一对多  归并 多端归并另一属性，独立关系 多端记录另一主键
     *      多对多   独立关系模式 中间表或者两边都写入另一主键
     *
     *  交集并集差集笛卡尔积
     *  投影  select a,b,c from t
     *  选择  select * from t where a =1
     *  自然连接  select a.x,b.y from a join b on a.x=b.x   同名的必须相同，去掉重复列后才开始编号
     *
     *   >>       代数式意义
     *          ζ1=4（Π1235（s1*s2））   先笛卡尔再筛选
     *          ΠΠ1235（ζ1=4（s1*s2））   先筛选再笛卡尔
     *          ^  表示and
     *
     *    >>  函数依赖  理论,单纯理解为函数，U属性 F函数
     *  设R(U,F)是属性U上的一个关系横式，X和Y是U的子集，r为R的任一关系，如果对于r中的任意两个元组u，v，只要有u[X]=v[X]，就有u[Y]=v[Y]，则称X函数决定Y，
     *      或称Y函数依赖于X，记为X->Y。
     *   所有的Y函数记为入度1，
     *   求候选键 ：如果入度为0的属性且能便利所有节点可以作为候选键  不能的需要加上中间节点做候选键
     *
     * >> ArmStrong公理
     *   关系模式R <U，F>来说有以下的推理规则:
     *      A1.自反律 (Reflexivity) : 若Y∈X∈U，则X->Y成立。
     *      A2.增广律(Augmentation): 若Z∈U且X->Y，则XZ->YZ成立。
     *      A3.传递律(Transitivity):若X->Y且Y->Z，则X->Z成立。
     *      根据A1，A2，A3这三条推理规则可以得到下面三条推理规则:
     *      合并规则:由X->Y，X->Z，有X->YZ。 (A2，A3)
     *      伪传递规则:由X->Y，WY-Z，有XW->Z。 (A2，A3)
     *      分解规则:由X->Y及Z∈Y，有X->Z。 (A1，A3)
     */
    /*nosql*/
    /**
     * 分类
     * 键值存储数据库  redis
     * 列存储数据库   hbase
     * 文档型数据库四    mongo
     * 图形数据库      neo4j
     *  >>特点
     *      高扩展性，高可伸缩性，高性能、灵活性
     *
     * >> 使用场景
     * 1、数据模型比较简单；
     * 2、需要灵活性更强的IT系统；
     * 3、对数据库性能要求较高；
     * 4、不需要高度的数据一致性；
     * 5、对于给定key，比较容易映射复杂值的环境。
     *
     *
     * >> 四层框架
     * 数据持久层（data persistence）、整体分布层（data distribution model）、数据逻辑模型层（data logical model）和接口层（interface）
     * 数据持久层定义了数据的存储形式，主要包括基于内存、硬盘、内存与硬盘相结合、订制可插拔四种形式。基于内存形式的数据存取速度最快，但可能会造成数据丢失；基于硬盘的数据可能保存很久，但存取速度较基于内存的形式慢；内存和硬盘相结合的形式，结合了前两种形式的优点，既保证了速度，又保证了数据不丢失；订制可插拔则保证了数据存取具有较高的灵活性。
     * 整体分布层定义了数据是如何分布的，相对于关系型数据库，NoSQL可选的机制比较多，主要有三种形式：一是CAP支持，可用于水平扩展。
     * 数据逻辑模型层定义了数据之间的联系和操作方式，主要包括文档、键值对、图像、列存储等。
     * 接口层定义了与数据访问相关的接口，包括查询、索引、事务、权限等
     */
}
