package com.priva.tango.exam;

/**
 * @description
 * @date 2023/10/16 17:49
 */
public class SoftTest {
    /**
     * 测试
     * 尽早不间断测试，v型瀑布
     * 程序员要自测但不能仅仅依靠自测
     * 测试要有重点，合理数据，不合理数据
     * 修改后回归测试
     *
     * 动态测试
     *      黑盒  功能角度测试，看输入输出
     *      白盒  结构测试，按照测试用例
     *      灰盒  介于黑白，多用于集成测试，更加关注模块
     *
     * 静态测试
     *      桌前审查    自测
     *      代码审查  Code Reivew  高级管理人员进行审查，代码和业务功能都要检查
     *      代码走查  Code Walkthrough  小组内部审查，非正式，仅检查代码，可以通过运行代码进行检查
     */
    /*V型瀑布*/
    /**
     * 单元测试:模块测试，模块功能、性能、接口等                        详细设计
     * 集成测试:模块间的接口                                        概要设计
     * 系统测试:真实环境下，验证完整的软件配置项能否和系统正确连接         需求分析
     * 确认测试:验证软件与需求的一致性。内部确认测试、Alpha测试、Beta测试、验收测试     用户完成
     * 回归测试:测试软件变更之后，变更部分的正确性对变更需求的符合性
     *
     * 自顶向下测试  集成测试时缺少其他模块，需要打桩
     * 自底向上  需要驱动模块
     * 混合式    都需要
     */
    /**
     * 系统测试
     *
     * 功能测试
     * 性能测试
     *      负载  各种工作负载下
     *      压力  系统瓶颈
     *      强度  资源特别低的情况下运行
     *      容量   并发测试，同时在线用户数量
     *      可靠性  MTTF
     * 健壮性测试
     * 用户界面测试
     * 安全性测试
     * 安装与反安装测试
     */
    /**
     * 面向对象测试
     *      算法层，单元测试：等价类划分，组合功能，递归函数，多态消息
     *      类层，模块测试：不变边界，模态测试，非模态测试
     *      模板层类树层，集成测试：多态服务测试和展平测试
     *      系统层，系统测试
     */
    /**
     * 调试方法--调试目的在于定位和修改，测试只是找错误
     *          测试结果可以预知，调试未知条件结束未知
     *          测试可以事先设计，进度可确定，调试无法确定过程和持续时间
     *  蛮力方法：通过计算机找错，低效耗时
     *  回溯法：从内岛外回溯，直到发现错误
     *  原因排除法：演绎和归纳，二分法实现，从外到内
     */
    /*新旧系统*/
    /**
     * >>>>遗留系统演化策略
     *  集成  高代码水平，低业务价值，针对信息孤岛，修改集成到现有系统
     *  改造  高水平高价值，功能增强
     *  淘汰  低代码水平低业务价值
     *  继承  业务价值高代码水平低不好该
     *
     *  新系统开发需要兼容旧有的功能模型和数据模型
     */
    /**
     * 新旧系统转换策略
     * 直接转换  直接更新
     * 并行转换  新老并存
     * 分段转换策略  新慢慢替换老的，按模块或者地区或者其他方式分段
     *
     */
    /**
     * 维护
     * 正确性维护:指改正在系统开发阶段已发生而系统测试阶段尚未发现的错误。
     * 适应性维护:指使应用软件适应环境变化[外部环境、数据环境]而进行的修改。
     * 完善性维护:扩充功能和改善性能而进行的修改。
     * 预防性维护:为了适应未来的软硬件环境的变化，应主动增加预防性的新的功能，以使用系统适应
     * 各类变化而不被淘汰。如将专用报表功能改成通用报表生成功能，以适应将来报表格式的变化。
     *
     */
}
