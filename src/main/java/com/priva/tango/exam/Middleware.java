package com.priva.tango.exam;

/**
 * 构建与中间件
 * @author tango
 * @description
 * @date 2023/10/19 10:15
 */
public class Middleware {
    /*构件*/
    /**
     * 构件定义
     1、软件构件是一种组装单元，它具有规范的接口规约和显式的语境依赖。软件构件可以被独立地部署并由第三方任意地组装。
     2、构件是某系统中有价值的、几乎独立的并可替换的一个部分，它在良好定义的体系结构语境内满足某清晰的功能。
     3、构件是一个独立发布的功能部分，可以通过其接口访问它的服务。

     *>>特点 ：独立部署单元，作为第三方的组装单元
     * 1、构件系统体系结构由一组平台决策、一组构件框架和构件框架之间的互操作设计组成。
     * 2、构件框架是一种专用的体系结构（通常围绕一些关键的机制），同时也是一组固定地作用于构件层次机制的策略。
     * 3、概念框架的互操作设计包括系统体系结构连接的所有框架间的互操作的规则。
     * 4、构件是一组通常需要同时部署原子的构件。构件和原子构件之间的区别在于大多数原子构件永远都不会被单独部署，尽管它们可以被单独部署。
     * 5、一个原子构件是一个模块和一组资源。
     * 6、模块是一组类和可能的非面向对象的结构体，比如过程或者函数。
     * 7、资源是一个类型化的项的固定集合。
     * 8、资源这个概念可以包含代码资源，进而包含模块。问题在于除了编译器编译一个模块或包生成的资源外，还可能存在其他的资源。在“纯对象”的方法中，
     *      资源是外部化的不可改变的对象一一不可改变是因为构件没有持久化的标志，而且复制不能被区分。
     */
    /*中间件*/
    /**
     * 中间件是一类构件
     * 中间件是一类系统软件
     * 中间件是为应用提供通用服务和功能的软件。数据管理、应用服务、消息传递、身份验证和API管理通常都要通过中间件
     * 中间件可以帮助开发人员更有效地构建应用。它就如同是应用、数据与用户之间的纽带。
     * >>特点 ~~简化结构、屏蔽差异（跨系统平台进行集成）、利于复用 ~
     * >>优点：
     1、面向需求。               即设计师集中精力于业务逻辑本身。
     2、业务的分隔和包容性。       应用开发人员可以按照不同的业务进行功能的划分，体现为不同的接口或交互模式。
     3、设计与实现隔离。          构件对外发送作用或构件间的交互，都是通过接口进行的，构件使用者只需要知道构件的接口，而不必关心其内部的实现，这是设计与实现分离的关键。
     4、隔离复杂的系统资源。       架构很重要的一个功能就是将系统资源与应用构件隔离，这是保证构件可复用甚至“即插即用”的基础，与中间件的意图也是一致的。
     5、符合标准的交互模型。       中间件则实现了架构的模型，实现了标准的协议。
     6、构件的复用。             中间件提供了构件封装、交互规则、与环境的隔离等机制，这些都为软件复用提供了方便的解决方案。
     7、提供对应用构件的管理。     基于中间件的软件可以方便地进行管理，因为构件总可以通过表示机制进行划分。
     */
    /*构建的组装模型 CBSD*/
    /**
     *  利用模块化方法，将整个系统模块化，并在一定构件模型的支持下，~复用~构件库中的一个或多个软件构件，通过组合手段高效率、高质量地构造应用软件系统的过程
     *  >>>CBSD模型过程
     *      需求分析和定义、架构设计、构件库的建立、应用软件构建、测试和发布5个阶段组成
     */
    /*构建复用*/
    /**
     * 复用的维度       水平复用：不分行业领域，各个领域通用；
     *                垂直复用：分行业领域，领域专用。复用流程
     * >>复用过程
     *  检索与提取构件      基于关键字的检索（右键电脑树形菜单找功能）、刻面检索法、超文本检索法
     *  理解与评价构件      判断行不行，要不要改
     *  修改构件           调整直接用、修改构件、新开发并入构件库
     *  组装构件
     *      >>构件组装的三种方式
               基于功能的组装：     采用子程序调用和参数传递的方式将构件组装起来。
               基于数据的组装：     仍然是传统的子程序调用与参数传递。但它所依赖的软件设计方法不再是功能分解，而是面向数据的设计方法，例如，Jackson系统开发方法。
               面向对象的组装：     如果从类库中检索出来的基类能够完全满足新系统的需求，则可以直接应用。否则必须以基类为父类，生成相应的子类，以满足新系统的需求。
            构件组装失配问题
                 由构件引起的失配，包括由于系统对构件基础设施、构件控制模型和构件数据模型的假设存在冲突引起的失配；
                 由连接子引起的失配，包括由于系统对构件交互协议、连接子数据模型的假设存在冲突引起的失配；
                 由于系统成分对全局体系结构的假设存在冲突引起的失配等。要解决失配问题，首先需要检测出失配问题，并在此基础上通过适当的手段消除检测出的失配问题
     */
    /*构建标准(CORBA J2EE DNA2000)*/
    /**
     *  COBRA（公共对象请求代理体系结构）
     *  OMG 组织制定的一个用于开发和配置分布式应用的服务器端构件模型规范
     *  主要包含：
     *  （1）抽象构件模型   用以描述服务器端构件结构及构件间互操作的结构
     *  （2）构件容器结构   用以提供通用的构件运行和管理环境，并支持对安全 、 事务 、 持久状态等系统服务的集成。
     *  （3）构件的配置和打包规范   CCM 使用打包技术来管理构件的二进制 、 多语言版本的可执行代码和配置信息，并制定了构件包的具体内容和文档内容标准
     *
     *  三个层次：
     *  伺服对象（Servant）：CORBA对象的真正实现，负责完成客户端请求。
     *  对象适配器（Object Adapter）：用于屏蔽ORB内核的实现细节，为服务器对象的实现提供者提供抽象接口，以便它们使用ORB内部的某些功能。
     *  对象请求代理（Object Request Broker）：解释调用并负责查找实现该请求的对象，将参数传给找到的对象，并调用方法返回结果。客户方不需要了解服务对象的位置、通信方式、实现、激活或存储机制。
     *
     * 体系内容
     * 对象请求代理（Object Request Broker，ORB）。负责对象在分布式环境中透明地收发请求和响应，它是构件分布对象应用、在异构或同构环境下实现应用间互操作的基础。
     * 对象服务（Object Services）。为使用和实现对象而提供的基本对象集合，这些服务应独立于应用领域。
     * 公共设施（Common Facilitites）。向终端用户提供一组共享服务接口，例如系统管理、组合文档和电子邮件等。
     * 应用接口（Application Interfaces）。由销售商提供的可控制其接口的产品，相应于传统的应用层表示，处于参考模型的最高层。
     * 领域接口（Domain Interfaces）。为应用领域服务而提供的接口，如OMG组织为PDM系统制定的规范。
     *
     */
    /*J2EE*/
    /**
     * J2EE
     1、JDBC:（Java Data Base Connectivity,java数据库连接）
     2、JNDI：(Java Naming and Directory Interface,Java命名和目录接口)
     3、EJB：（Enterprise Java Beans，企业级Java Beans）
             EJB是实现分布式业务逻辑的Java组件。它以一个标准自动处理了如数据持久化、事务集成、安全对策等问题，为后台业务提供了一个标准方式。“企业”
                意味着应用的扩展性、可用性、可靠性、安全性、事务性和分布性。
             EJB优点：
             1）、为客户提供可分布和可部署的业务逻辑服务。
             2）、拥有定义良好的接口。
             3）、在应用服务器之间可重用。
             4）、在提供管理和控制服务的容器中执行。
     4、RMI：（Remote Method Invocation，远程方法调用)
        是一种基于Java的分布式编程模型，允许对象使用stub和skeleton调用远程的对象。能够让在某个Java虚拟机上的对象调用另一个Java虚拟机中的对象
            上的方法，它使得客户机上运行的程序可以调用远程服务器上的对象。
        RMI使用序列化在两个对象间通过值传输数据。
     5、Java IDL/CORBA：（Java Interface Definiyion Language/Common Object Request  Broker Architecture ，Java接口定义语言/公用对象请求代理程序体系结构）
        CORBA是一个分布式的面向对象应用架构规范，定义了分布式对象如何实现互操作。CORBA对象的接口使用IDL语言来定义。对象的接口定义了对象的类型，对象的方法和引用参数以及对象方法可能返回的异常结果。
     6、JSP：（Java Server Pages，Java服务器页面）
         JSP包括HTML标签，JSP标签，Java代码。
         JSP是Java Servlet技术的发展和自然扩展，将转化成Servlet。根据客户端请求创建动态Web页面的文本文件。是J2EE中的“视图”组件。
     7、Servlets：（Server Applet，全称Java Servlet，暂无中文译）
         Servlets是Java类，使用基于HTTP协议的请求/响应模型，同Web客户进行交互。
         HTTP Servlets：由容器管理，可产生动态内容，能在本地Session中储存客户数据。
     8、XML：（Extensible Markup Language，可扩展标记语言）
        可扩展标记语言，标准通用标记语言的子集，是一种用于标记电子文件使其具有结构性的标记语言。
     9、JMS：（Java Message Service，Java消息服务）
         JMS是Java平台上有关面向消息中间件(MOM)的技术规范，它便于消息系统中的Java应用程序进行消息交换,并且通过提供标准的产生、发送、接收消息的接口简化企业应用的开发，翻译为Java消息服务。
         Java消息服务应用程序结构支持两种模型：
             点对点消息类型：消息发送给一个单独的使用者。
             发布/订阅消息类型：支持一个事件驱动模型，生产者和消费者都残余消息的传递。
     10、JTA：（Java Transaction API，Java事务API）
         JTA允许应用程序执行分布式事务处理，在多个网络计算机资源上访问并且更新数据，极大地增强了数据访问能力。
         JTA被用于与事务服务进行通信，为启动事务，连接现有事务，提交事务和撤销事务提供标准的Java API。
     11、JTS：（Java Transaction Service，Java事务服务）
         JTS是一个组件事务监视器。JTS和JTA为J2EE提供了分布式事务服务。
         JTS是CORBA OTS事务监控的基本的实现。JTS规定了事务管理器的实现方式。该事务管理器是在高层支持Java Transaction API (JTA)规范，并且在较底层实现OMG OTSspecification的Java映像。JTS事务管理器为应用服务器、资源管理器、独立的应用以及通信资源管理器提供了事务服务。
     12、JavaMail
        JavaMail是用于存取邮件服务器的API，它提供了一套邮件服务器的抽象类。不仅支持SMTP服务器，也支持IMAP服务器。
     13、JAF：（JavaBeans Activation Framework，JavaBeans活动框架）
         JAF是一个专用的数据处理框架，它用于封装数据，并为应用程序访问和操作数据的接口。JFA主要作用在于让Java应用层序知道如何对一个数据源进行查看、编辑和打印等操作。
         JavaMail利用JAF来处理MIME编码的邮件附件。MIME的字节流可以被转换成Java对象，或者转换自Java对象。大多数应用都可以不需要直接使用JAF。
     */
    /*DNA2000*/
    /**
     * Windows2000系列操作系统平台基础上
     * >>>可以跨语言但是无法跨平台
     * DNA2000融合了当今最先进的分布计算理论和思想,如事务处理、可伸缩性、异步消息队列、集群等内容
     */
}
